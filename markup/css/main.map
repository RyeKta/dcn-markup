{
	"version": 3,
	"file": "../scss/main.css",
	"sources": [
		"../scss/main.scss",
		"../scss/_bootstrap-custom.scss",
		"../scss/vendors/_include-media.scss",
		"../scss/base/_mixins.scss",
		"../scss/base/_helpers.scss",
		"../scss/layout/_header.scss"
	],
	"sourcesContent": [
		"@import \"bootstrap-custom\";\r\n\r\n@import 'vendors/include-media';\r\n\r\n@import 'base/mixins';\r\n@import 'base/helpers';\r\n\r\n@import 'layout/header';\r\n\r\nimg{\r\n\tmax-width: 100%;\r\n\theight: auto;\r\n}",
		"/*** Background color for `<body>`.*/\n$body-bg:               #f7f8fd;\n/*** Global text color on `<body>`.*/\n$text-color:            #030611;\n$brand-primary:         #4b68dd;\n$brand-success:         #5970cf;\n$brand-info:            #f4ef4c;\n$brand-warning:         #ded924;\n$brand-danger:          #e14111;\n$white: #f7f8fd;\n$black: #030611;\n/*** Global textual link color.*/\n$link-color:            $brand-success;\n/*$link-hover-color:      $brand-success;*/\n\n/*== Typography*/\n/* ==========================================================================\n   http://www.modularscale.com/?16&px&1.25\n   ========================================================================== */\n$font-family-sans-serif:  \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif ;\n$font-family-serif: Lora, 'Times New Roman', Times, serif;\n$font-size-base:          16px;\n$font-size-h1:\t\t\t  39px;\n$font-size-h2:            33px;\n$font-size-h3:            31px;\n$font-size-h4:\t\t\t  25px;\n$font-size-h5:\t\t\t  20px;\n$font-size-h6:\t\t\t  $font-size-base;\n\n/*** Unit-less `line-height` for use in components like buttons.*/\n$line-height-base:        1.5625; /* 25/16*/\n\n/*** By default, this inherits from the `<body>`.*/\n$headings-font-family:\t  $font-family-serif;\n$headings-font-weight:    700;\n\n$btn-default-color:              #333;\n$btn-default-bg:                 #fff;\n$btn-default-border:             #ccc;\n\n$btn-primary-border:             $brand-primary;\n$btn-success-border:             $brand-success;\n$btn-info-border:                $brand-info;\n$btn-warning-border:             $brand-warning;\n$btn-danger-border:              $brand-danger;\n\n/*== Navbar*/\n/* Basics of a navbar*/\n$navbar-height:                    auto;\n$navbar-collapse-max-height:       999px;\n\n$navbar-default-color:             #030611;\n$navbar-default-bg:                #f7f8fd;\n$navbar-default-border:            transparent;\n$navbar-border-radius:\t\t\t   0;\n$navbar-margin-bottom:\t\t\t   0;\n\n/* Navbar links*/\n$navbar-default-link-color:                #030611;\n$navbar-default-link-hover-color:          #030611;\n$navbar-default-link-active-color:         #030611;\n$navbar-default-link-active-bg:            transparent;\n\n/* Navbar toggle*/\n$navbar-default-toggle-hover-bg:           #fff;\n$navbar-default-toggle-icon-bar-bg:        #030611;\n$navbar-default-toggle-border-color:       transparent;\n",
		"@charset 'UTF-8';\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.1\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported \n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n/// \n/// @param {String} $message - Message to log\n///\n@function log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n/// \n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if log('..') {}` or `$_: log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }  \n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if log(..) {}` instead.\n  $_: log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value \n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if log(..) {}` instead.\n    $_: log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: log('Value for `to-number` should be a number or a string.');\n  }\n  \n  $result: 0;\n  $digits: 0;\n  $minus: str-slice($value, 1, 1) == '-';\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n  \n  @for $i from if($minus, 2, 1) through str-length($value) {\n    $character: str-slice($value, $i, $i);\n    \n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n    \n    @if $character == '.' {\n      $digits: 1; \n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);  \n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n  \n  @return if($minus, -$result, $result);;\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n  \n  @if not index(map-keys($units), $unit) {\n    $_: log('Invalid unit `#{$unit}`.');\n  }\n  \n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of \n/// the call. It is helpful when having a component needing an extended \n/// configuration such as custom breakpoints (referred to as tweakpoints) \n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $tweak-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { } \n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { } \n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { } \n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { } \n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { } \n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or \n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }    \n  }\n}",
		"// vertical align el inside parent with fixed height/min-height\n// usage \n// html - .parent>.child\n// scss - @include v-align;\n//     or @include v-align(250px);\n//     or @include v-align(250px, bottom, before);\n//\n@mixin v-align($va-height: 100%, $va-direction: middle, $va-pseudo: after) {\n  white-space: nowrap;\n  text-align: center;\n\n  &:#{$va-pseudo} {\n    content: '';\n    display: inline-block;\n    vertical-align: $va-direction;\n    width: 0;\n    min-height: $va-height;\n  }\n\n  > * {\n    white-space: normal;\n    display: inline-block;\n    vertical-align: $va-direction;\n    max-width: 99%;\n  }\n}\n\n// vertical align a pair of child el inside parent\n// usage \n// html - .post>.image+.text\n// scss - @include v-align-pair(image, text);\n//     or @include v-align-pair(image, text, bottom);\n//     or @include v-align-pair(image, text, middle, 200px);\n//\n@mixin v-align-pair($child-name1, $child-name2, $valign: middle, $width1: auto, $width2: auto ) {\n  display: table;\n  .#{$child-name1}{\n    display: table-cell;\n    vertical-align: $valign;\n    width: $width1; \n  }\n .#{$child-name2} {\n    display: table-cell;\n    vertical-align: $valign;\n    width: $width2;\n  }\n}\n\n\n// vertical align el\n// usage: @include vertical-align-el;\n//\n@mixin vertical-align-el {\n  position: relative;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Mixin helping defining both `width` and `height` simultaneously.\n///\n/// @author Hugo Giraudel\n///\n/// @access public\n///\n/// @param {Length} $width - Element’s `width`\n/// @param {Length} $height ($width) - Element’s `height`\n///\n/// @example scss - Usage\n///   .foo {\n///     @include size(10em);\n///   }\n///\n///   .bar {\n///     @include size(100%, 10em);\n///   }\n///\n/// @example css - CSS output\n///   .foo {\n///     width: 10em;\n///     height: 10em;\n///   }\n///\n///   .bar {\n///     width: 100%;\n///     height: 10em;\n///   }\n///\n@mixin size($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// font-smothing\n/// @include font-smoothing(on);\n/// @include font-smoothing(off);\n@mixin font-smoothing($value:on){\n  @if $value == on{\n    -webkit-font-smoothing:antialiased;\n    -moz-osx-font-smoothing:grayscale;\n  }\n  @else{\n    -webkit-font-smoothing:subpixel-antialiased;\n    -moz-osx-font-smoothing:auto;\n  }\n}\n\n\n/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.\n///\n/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement\n///\n/// @example scss - Usage\n///   .element {\n///     @include hide-text;\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     overflow: hidden;\n///     text-indent: 101%;\n///     white-space: nowrap;\n///   }\n///\n@mixin hide-text {\n  overflow: hidden;\n  text-indent: 101%;\n  white-space: nowrap;\n}\n\n\n/// Creates a visual triangle. \n/// Mixin takes ($size, $color, $direction)\n/// The $size argument can take one or two values—width height.\n/// The $color argument can take one or two \n/// values—foreground-color background-color.\n/// \n/// @author http://bourbon.io/docs/#triangle\n///\n/// $direction: \n/// up, down, left, right, up-right, up-left, down-right, down-left\n/// @example scss - Usage\n///   @include triangle(12px, gray, down);\n///   @include triangle(12px 6px, gray blue, up-left);\n///\n@mixin triangle($size, $color, $direction) {\n  $width: nth($size, 1);\n  $height: nth($size, length($size));\n  $foreground-color: nth($color, 1);\n  $background-color: if(length($color) == 2, nth($color, 2), transparent);\n  height: 0;\n  width: 0;\n\n  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {\n    $width: $width / 2;\n    $height: if(length($size) > 1, $height, $height/2);\n\n    @if $direction == up {\n      border-bottom: $height solid $foreground-color;\n      border-left: $width solid $background-color;\n      border-right: $width solid $background-color;\n    } @else if $direction == right {\n      border-bottom: $width solid $background-color;\n      border-left: $height solid $foreground-color;\n      border-top: $width solid $background-color;\n    } @else if $direction == down {\n      border-left: $width solid $background-color;\n      border-right: $width solid $background-color;\n      border-top: $height solid $foreground-color;\n    } @else if $direction == left {\n      border-bottom: $width solid $background-color;\n      border-right: $height solid $foreground-color;\n      border-top: $width solid $background-color;\n    }\n  } @else if ($direction == up-right) or ($direction == up-left) {\n    border-top: $height solid $foreground-color;\n\n    @if $direction == up-right {\n      border-left:  $width solid $background-color;\n    } @else if $direction == up-left {\n      border-right: $width solid $background-color;\n    }\n  } @else if ($direction == down-right) or ($direction == down-left) {\n    border-bottom: $height solid $foreground-color;\n\n    @if $direction == down-right {\n      border-left:  $width solid $background-color;\n    } @else if $direction == down-left {\n      border-right: $width solid $background-color;\n    }\n  } @else if ($direction == inset-up) {\n    border-color: $background-color $background-color $foreground-color;\n    border-style: solid;\n    border-width: $height $width;\n  } @else if ($direction == inset-down) {\n    border-color: $foreground-color $background-color $background-color;\n    border-style: solid;\n    border-width: $height $width;\n  } @else if ($direction == inset-right) {\n    border-color: $background-color $background-color $background-color $foreground-color;\n    border-style: solid;\n    border-width: $width $height;\n  } @else if ($direction == inset-left) {\n    border-color: $background-color $foreground-color $background-color $background-color;\n    border-style: solid;\n    border-width: $width $height;\n  }\n}\n\n\n/// Animate css properties\n// usage \n// scss - @include animate(color);\n//     or @include animate(color width);\n//     or @include animate(color width, 1s, linear);\n//\n$animation-speed: .3s !default;\n\n@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out) {\n  $list:();\n  @each $prop in $properties {\n    $str: #{$prop} #{$animation-speed} #{$easing};\n    $list: join($list, $str, comma);\n  }\n  transition: $list;\n}\n\n\n/// Mixin for styling form-placeholders\n/// @example scss - Usage\n///   @include placeholder {\n///    color: #333;\n///   }\n///\n///   input[type='text'],\n///   input[type='tel'],\n///   input[type='email'] {\n///     @include placeholder {\n///      color: red;\n///     }\n///   }\n\n@mixin placeholder {\n  &::-webkit-input-placeholder {@content}\n  &::-moz-placeholder {opacity: 1; @content}\n  &:-moz-placeholder {@content}\n  &:-ms-input-placeholder {@content}\n  &.placeholder {@content}\n}\n\n@mixin font($font-size, $line-height, $font-weight:normal) {\n  font-size:$font-size;\n  line-height: $line-height;\n  font-weight: $font-weight;\n}\n\n@mixin display($display, $v-align) {\n  display: $display;\n  vertical-align: $v-align;\n}\n\n",
		"// list reset\n%listreset {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n// clearfix\n%clearfix {\n &:after {\n    content: '';\n    display: block;\n    clear: both;\n  }\n}\n\n.clearfix {\n  @extend %clearfix;\n}\n\n\n// transition\n%transition {\n transition: all 0.3s ease-in-out;\n}\n\n// justify nav\n%justify {\n text-align: justify;\n > * {\n  display: inline-block;\n  vertical-align: top;\n  text-align: left;\n }\n &:after {\n  content: '';\n  width: 100%;\n  display: inline-block;\n  vertical-align: top;\n }\n}\n\n\n\n/// * Helper class to truncate and add ellipsis to a string too long for it to fit\n/// * on a single line.\n/// * 1. Prevent content from wrapping, forcing it on a single line.\n/// * 2. Add ellipsis at the end of the line.\n\n.ellipsis {\n  white-space: nowrap; /* 1 */\n  text-overflow: ellipsis; /* 2 */\n  overflow: hidden;\n}\n\n",
		"#nav{\r\n\tposition: relative;\r\n}\r\n.navbar-nav{\r\n\tletter-spacing: -4px;\r\n\tli{\r\n\t\ttext-transform: uppercase;\r\n\t\tmargin: 1.3125em 0;\r\n\t\tletter-spacing: 0;\r\n\t\ttext-align: center;\r\n\t\tfloat: none;\r\n\t\t@include media('>=tablet'){\r\n\t\t\t@include display(inline-block, top);\r\n\t\t\ttext-align: left;\r\n\t\t}\r\n\t\ta{\r\n\t\t\t@include display(inline-block, top);\r\n\t\t\t@include font(0.75em, 1.333, 600);\r\n\t\t\tpadding: 0.6667em 0;\r\n\t\t\tposition: relative;\r\n\t\t\tmargin: 0 2.083em;\r\n\t\t\t&:after{\r\n\t\t\t\tbackground-color: $brand-primary;\r\n\t\t\t\t-webkit-transition: all 0.3s ease;\r\n\t\t\t\t-webkit-transition: all 0.3s ease 0s;\r\n\t\t\t\ttransition: all 0.3s ease 0s;\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tcontent: \"\";\r\n\t\t\t\theight: 2px;\r\n\t\t\t\tbottom: 0;\r\n\t\t\t\tleft: 0;\r\n\t\t\t\twidth: 0;\r\n\t\t\t}\r\n\t\t\t&:hover{\r\n\t\t\t\t&:after{\r\n\t\t\t\t\twidth: 100%;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t.active{\r\n\t\ta{\r\n\t\t\t&:after{\r\n\t\t\t\twidth: 100%;\r\n\t\t\t}\r\n\t\t\t&:hover,\r\n\t\t\t&:focus{\r\n\t\t\t\t&:after{\r\n\t\t\t\t\twidth: 100%;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n.navbar-brand{\r\n\tmargin: 5px 0;\r\n\twidth: 40px;\r\n\t@include media('>=tablet'){\r\n\t\tmargin: 13px 15px 12px;                                   \r\n\t\twidth: 50px;\r\n\t}\r\n}\r\n.navbar-toggle{\r\n\tmargin: 1em 0 0 0;\r\n\tpadding: 0;\r\n\t&:hover{\r\n\t\topacity: 0.8;\r\n\t}\r\n\t.icon-bar{\r\n\t\twidth: 1.5625em;\r\n\t\t& + .icon-bar{\r\n\t\t\tmargin-top: 0.375em;\r\n\t\t}\r\n\t}\r\n}\r\n#main-nav{\r\n\t-webkit-box-shadow: 0 15px 10px 0 rgba(0, 0, 0, 0.1), 0 1px 0 rgba(0, 0, 0, 0.1) inset;\r\n\t        box-shadow: 0 15px 10px 0 rgba(0, 0, 0, 0.1), 0 1px 0 rgba(0, 0, 0, 0.1) inset;\r\n\tbackground-color: $white;\r\n\tposition: absolute;\r\n\tz-index: 999;\r\n\twidth: 100%;\r\n\tmargin: 0;\r\n\ttop: 100%;\r\n\tleft: 0;\r\n\t@include media('>=tablet'){\r\n\t\tposition: static;\r\n\t\t-webkit-box-shadow: none;\r\n\t\t        box-shadow: none;\r\n\t\twidth: auto;\r\n\t}\r\n}"
	],
	"mappings": "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",
	"names": []
}